<?php

/**
 * Membre
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    Annuaire
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7691 2011-02-04 15:43:29Z jwage $
 */
class Membre extends BaseMembre
{
  public function __toString() {
    if($this->getPrenom() != '' || $this->getNom() != '')
      return $this->getPrenom().' '.$this->getNom();
    else
      return ' ('.$this->getUsername().')';
  }

  public function getFullString() {
    if($this->getPrenom() != '' || $this->getNom() != '')
      return $this->getPrenom().' '.$this->getNom().' ('.$this->getUsername().')';
    else
      return ' ('.$this->getUsername().')';
  }
  
  public function isAdmin() {
    return ($this->getStatus()=='Administrateur');
  }
  
  public function isMembre() {
    return ($this->getStatus()=='Membre');
  }
  
  public function isAncien() {
    return ($this->getStatus()=='Ancien');
  }
  
  public function save(Doctrine_Connection $conn = null)
  {
    if(strlen($this->getPasswd()) != 40)
      $this->setPasswd(sha1($this->getPasswd()));

    if($this->getUsername() == '')
    {
      $nom = $this->getNom();
      $prenom = $this->getPrenom();
      $this->setUsername(strtolower($prenom[0].'.'.$nom));
    }

    if($this->getEmailInterne() == '')
    {
      $this->setEmailInterne($this->getUsername().'@iariss.fr');
    }
    
    $this->setTelMobile(wordwrap($this->getTelMobile(), 2, ' ', true));
    $this->setTelFixe(wordwrap($this->getTelFixe(), 2, ' ', true));
    
    return parent::save($conn);
  }
  
  public static function getProfile($username)
  {
    return Doctrine::getTable('Membre')
          ->createQuery('m')
          ->select('m.id, m.status')
          ->where('m.username = ?', array($username))
          ->execute()->getFirst();
  }
  
  static public function retrieveSuggestions($q, $l,$c)
  {
    $membres = Doctrine_Query::create()
            ->select('m.*,LOCATE(:token_raw,m.nom) AS index')
            ->from('Membre m')
            ->where('t.nom LIKE :token')
            ->orderBy('index')
            ->limit($l)
            ->execute(array('token_raw' => $q , 'token' => '%'.$q.'%'));
 
    $jsonMembres = array();
    
    foreach ($membres as $membre)
    {
      $jsonMembres[] =array('caption' => (string) $membre->Translation[$culture]->nom,'value'=> $membre->getPrimaryKey()) ;
    }
    return $jsonMembres;
  }


}
