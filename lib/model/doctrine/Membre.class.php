<?php

/**
 * Membre
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    Annuaire
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7691 2011-02-04 15:43:29Z jwage $
 */
class Membre extends BaseMembre
{
  public function __toString() {
    if($this->getPrenom() != '' || $this->getNom() != '')
      return $this->getPrenom().' '.$this->getNom();
    else
      return ' ('.$this->getUsername().')';
  }

  public function getFullString() {
    if($this->getPrenom() != '' || $this->getNom() != '')
      return $this->getPrenom().' '.$this->getNom().' ('.$this->getUsername().')';
    else
      return ' ('.$this->getUsername().')';
  }

  public function isAdmin() {
    return ($this->getStatus()=='Administrateur');
  }

  public function isMembre() {
    return ($this->getStatus()=='Membre');
  }

  public function isAncien() {
    return ($this->getStatus()=='Ancien');
  }

  public function save(Doctrine_Connection $conn = null)
  {
    if(strlen($this->getPasswd()) != 40)
      $this->setPasswd(sha1($this->getPasswd()));

    if($this->getUsername() == '')
    {
      $nom = $this->getNom();
      $prenom = $this->getPrenom();
      $this->setUsername(strtolower($prenom[0].'.'.$nom));
    }

    if($this->getEmailInterne() == '')
    {
      $this->setEmailInterne($this->getUsername().'@iariss.fr');
    }

    $this->setTelMobile(wordwrap($this->getTelMobile(), 2, ' ', true));
    $this->setTelFixe(wordwrap($this->getTelFixe(), 2, ' ', true));

    return parent::save($conn);
  }

  public static function getProfile($username)
  {
    return Doctrine::getTable('Membre')
          ->createQuery('m')
          ->select('m.id, m.status')
          ->where('m.username = ?', array($username))
          ->execute()->getFirst();
  }

  public function setCurrentCotisation($value)
  {
    $this->setCotisation($value, Tools::getAnneeCourante());
  }
  
  public function setCotisation($value, $year)
  {
    if($value)
    {
      if($this->getCotisation($year) == null)
      {
        $cotisations = $this->getCotisations();

        $cotisation = new Cotisation();
        $cotisation->setMembreId($this->getId());
        $cotisation->setAnnee($year);

        $cotisations->add($cotisation);
      }
    }
    else
    {
      $cotisations = $this->getCotisations();

      foreach($cotisations as $cotis_offset => $cotisation)
      {
        if($cotisation->getAnnee() == $year)
        {
          $cotisations->remove($cotis_offset);
          return;
        }
      }
    }
  }

  public function getCurrentCotisation()
  {
    return $this->getCotisation(Tools::getAnneeCourante());
  }

  public function getCotisation($year)
  {
    $cotisations = $this->getCotisations();

    foreach($cotisations as $cotisation)
    {
      if($cotisation->getAnnee() == $year)
      {
        return $cotisation;
      }
    }

    return null;
  }

  public function setCurrentQuittance($value)
  {
    $this->setQuittance($value, Tools::getAnneeCourante());
  }

  public function setQuittance($value, $year)
  {
    if($value)
    {
      if($this->getquittance($year) == null)
      {
        $quittances = $this->getQuittances();

        $quittance = new quittance();
        $quittance->setMembreId($this->getId());
        $quittance->setAnnee($year);

        $quittances->add($quittance);
      }
    }
    else
    {
      $quittances = $this->getQuittances();

      foreach($quittances as $quitt_offset => $quittance)
      {
        if($quittance->getAnnee() == $year)
        {
          $quittances->remove($quitt_offset);
          return;
        }
      }
    }
  }

  public function getCurrentQuittance()
  {
    return $this->getQuittance(Tools::getAnneeCourante());
  }

  public function getQuittance($year)
  {
    $quittances = $this->getQuittances();

    foreach($quittances as $quittance)
    {
      if($quittance->getAnnee() == $year)
      {
        return $quittance;
      }
    }

    return null;
  }
}
